#################################################################
## Iro
################################################################ 
##
## * Press Ctrl + '+'/'-' To Zoom in
## * Press Ctrl + S to save and recalculate... 
## * Documents are saved to web storage.
## * Only one save slot supported.
## * Matches cannot span lines.
## * Unicode chars must be defined in \u0000 to \uffff format.
## * All matches must be contained by a single group ( ... )
## * Look behinds not permitted, (?<= or (?<!
## * Look forwards are permitted (?= or (?!
## * Constants are defined as __my_const = (......)
## * The \= format allows unescaped regular expressions
## * Constants referenced by match \= $${__my_const}
## * Constants can reference other constants
## * You are free to delete all the default scopes.
## * Twitter : ainslec , Web: http://eeyo.io/iro
##
################################################################

name                   = ConverseScript
file_extensions []     = converse;


################################################################
## Constants
################################################################

__VAR \= (\b[a-zA-Z][a-zA-Z0-9]*)

################################################################
## Styles
################################################################

styles [] {

.comment : style {
   color                 = light_green
   italic                = true
   ace_scope             = comment
   textmate_scope        = comment
   pygments_scope        = Comment
}

.keyword : style {
   color     = cyan
   ace_scope             = keyword
   textmate_scope        = keyword
   pygments_scope        = Keyword
}

.numeric : style {
   color                 = gold
   ace_scope             = constant.numeric
   textmate_scope        = constant.numeric
   pygments_scope        = Number
}

.punctuation : style {
   color     = white
   ace_scope             = punctuation
   textmate_scope        = punctuation
   pygments_scope        = Punctuation
}

.text : style {
   color                 = light_grey
   ace_scope             = text
   textmate_scope        = text
   pygments_scope        = String
}

.keywords : style {
   color                 = red
   ace_scope             = text
   textmate_scope        = text
   pygments_scope        = String
}

.output : style {
   bold = true
}

.keywordStyle : style {
   color = violet
}

.booleanStyle : style {
   color = red
}

.fnStyle : style {
   color = red
}

.magicVariableStyle: style {
   color = light_blue
}

.globalVariableStyle: style {
   color = brown
}

.intVariable: style {
   color = light_blue
}

.decoratorStyle: style {
   color = green
}

.illegal : style {
   color                 = white
   background_color      = red
   ace_scope             = invalid
   textmate_scope        = invalid
   pygments_scope        = Generic.Error
}

}

#################################################
## Parse contexts
#################################################

contexts [] {

##############################################
## Main Context - Entry point context
##############################################

main : context {

   : include "block";
   : include "function";
   : include "value" ;
   : include "decorator";
   : include "output";
   : include "executeFn" ;
   : include "magicVariable" ;
   : include "globalVariable";
   : include "variable" ;
   
   : inline_push {
      regex          \= (\{)
      styles []       = .punctuation;
      : pop {  
         regex       \= (\})
         styles []    = .punctuation;
      }
      : include "main" ;
   }
   
   : include "multi_line_comment" ;
   
   : pattern {
      regex          \= (//.*)
      styles []       = .comment;
   }
   
   #: pattern {
   #   regex          \= ([^\s])
   #   styles []       = .illegal;
   # }
   
}

#################################################
## End of Contexts
#################################################

###########################################
## Numeric Context
###########################################

function: context {
   : inline_push {
      regex          \= $${__VAR}([ ]*)(\()
      styles []       = .fnStyle, .punctuation, .punctuation;
      : pop {
         regex       \= (\))
         styles []    = .punctuation;
      }
      : include "value";
   }
}

executeFn: context {
   : inline_push {
      regex          \= $${__VAR}([ ]*)(\()
      styles []       = .fnStyle, .punctuation, .punctuation;
      : pop {
         regex       \= (\))
         styles []    = .punctuation;
      }
      : include "value";
   }
}

variable: context {
   : pattern {
      regex          \= (\b[a-z][a-z0-9]*)
      styles []       = .keyword;
   }
}

integrationVariable: context {
   : inline_push {
      regex          \= (\{)
      styles []       = .intVariable;
      : pop {  
         regex       \= (\})
         styles []    = .intVariable;
      }
      : include "value" ;
   }
}

magicVariable: context {
   : pattern {
      regex          \= (:$${__VAR})
      styles []       = .magicVariableStyle;
   }
}

globalVariable: context {
   : pattern {
      regex          \= (\$$${__VAR})
      styles []       = .globalVariableStyle;
   }
}

numeric : context {
   : pattern {
      regex          \= (\b\d+)
      styles []       = .numeric;
   }
}

decorator: context {
  : inline_push {
      regex          \= (@[^\(]+)(\()
      styles []       = .decoratorStyle, .punctuation;
      : pop {
         regex       \= (\))
         styles []    = .punctuation;
      }
      : include "value" ;
  }
}

block: context {
   : inline_push {
      regex          \= (for|if|else)([ ]*)(\()
      styles []       = .keywordStyle, .punctuation, .punctuation;
      : pop {
         regex       \= (\))
         styles []    = .punctuation;
      }
      : pattern {
         regex       \= (of)
         styles []    = .keywordStyle;
      }
      : include "value";
   }
}

value: context {
   : include "boolean";
   : include "executeFn";
   : include "numeric";
   : include "string";
   : include "array";
   : include "magicVariable";
   : include "globalVariable";
   : include "variable";
}

array: context {
   : inline_push {
      regex          \= (\[)
      styles []       = .punctuation;
      : pop {
         regex       \= (\])
         styles []    = .punctuation;
      }
      : include "value";
   }
}

boolean: context {
   : pattern {
      regex          \= (true|false)
      styles []       = .booleanStyle;
  }
}

/*output: context {

   : pattern {
      regex          \= (>.*)
      styles []       = .output;
  }
}*/

output: context {
   : inline_push {
      regex          \= (>)
      styles []       = .output;
      : eol_pop {}
      :include "integrationVariable";
      :pattern {
         regex    \= ([^'{]+)
         styles [] = .output;
      }
   }
}

/*stringKey: context {
   : inline_push {
      regex          \= (\'#)
      styles []       = .punctuation;
      default_style   = .keywords
      : pop {
         regex       \= (\')
         styles []    = .punctuation;
      }
   }
}*/


string: context {
   : inline_push {
      regex          \= (\')
      styles []       = .text;
      : pop {
         regex       \= (\')
         styles []    = .text;
      }
      :include "integrationVariable";
      :pattern {
         regex    \= ([^'{]+)
         styles [] = .text;
      }
   }
}

scope: context {
   : inline_push {
      regex          \= (\()
      styles []       = .punctuation;
      : pop {
         regex       \= (\))
         styles []    = .punctuation;
      }
      : include "numeric" ;
      : pattern {
         regex       \= (,)
         styles []    = .punctuation;
      }
   }
}


###########################################
## Multi Line Comment Context
###########################################

multi_line_comment : context {
   description        = multiline
   : inline_push {
      regex          \= (/\*)
      styles []       = .comment;
      default_style   = .comment
      : pop {
         regex       \= (\*/)
         styles []    = .comment;
      }
   }
}
   
}
